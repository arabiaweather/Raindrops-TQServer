{
  "name": "file-queue",
  "version": "0.1.0",
  "description": "A file system based queue",
  "main": "queue.js",
  "scripts": {
    "test": "mocha test/queue.js"
  },
  "dependencies": {
    "async": "*"
  },
  "devDependencies": {
    "mocha": "1.13.0",
    "jshint": "*"
  },
  "keywords": [
    "queue",
    "file",
    "fs",
    "directory"
  ],
  "author": {
    "name": "Vincent Landgraf"
  },
  "license": "BSD-2-Clause",
  "readme": "# FS-Queue\n\nA simple file system based queuing implementation. Based on the maildir format,\nthe queues are lockfree and therefore work in most situatuions. Look\n[here](http://cr.yp.to/proto/maildir.html) for the maildir specification.\nThe queue organises everything in FIFO (first-in first-out) order, because of\nthat it is not possible to get the messages of the queue with random access.\nAll objects are encoded using json and therefore can be easily read manually.\n\nThis queuing library has a specialty, its supports transactions for popping items.\n\n## Create a queue\n\nThe queue is created based on a folder. The passed folder will contain have\nthree directories `cur`, `tmp` and `new`. The names of the files follow the \nmaildir conventions.\n\n    var queue = new require('fs-queue').Queue('.');\n\n## Pushing and poping messages from the queue\n\nPoping a message can be done at any time. If the queue doesn't contain at the\nmoment it 'blocks' until it does. If there was an error, while removing the\nmessage `err` will contain an error message.\n\n    queue.pop(function(err, message) {\n      if (err) throw err;\n      console.log(message);\n    });\n\nPushing an item into the queue could cause an error if e.g. no disk space is\nleft on the device.\n\n    queue.push('Hello World', function(err) {\n      if (err) throw err;\n    });\n\n## Getting the length of the queue\n\nThe queue lenght can easily be determined with the following call:\n\n    queue.length(function(err, length) {\n      console.log(length);\n    });\n\n## Transactional poping\n\nA transactional pop means, that the element is taken from the queue, but will\nnot be removed until commit is called. The rollback action makes the item again\navailable for poping.\n\n    queue.tpop(function(err, message, commit, rollback) {\n      if (Processor.process(message) === true) {\n        commit(function(err) { if (err) throw err; });\n      } else {\n        rollback(function(err) { if (err) throw err; });\n      }\n    });\n\nThere can be multiple layers of transactions. Since transactional pops (tpops) don't block the poping in general, there can be multiple inside of each other.\nDownside is, that it can't be assured that the messages are processed in order.\n\n## Clearing\n\nTo remove all items from a queue, for example for testing purposes, use clear.\n\n    queue.clear(function(err) { if (err) throw err; });\n",
  "readmeFilename": "README.md",
  "_id": "file-queue@0.1.0",
  "dist": {
    "shasum": "f123046ec601e34004b6e96792b4824d8efce9c1"
  },
  "_from": "file-queue@",
  "_resolved": "https://registry.npmjs.org/file-queue/-/file-queue-0.1.0.tgz"
}
