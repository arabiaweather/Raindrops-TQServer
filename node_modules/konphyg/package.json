{
  "name": "konphyg",
  "description": "Cascading configuration files made easy in Node.js.",
  "tags": [
    "configuration",
    "environments"
  ],
  "version": "1.2.1",
  "author": {
    "name": "Pedro Teixeira",
    "email": "pedro.teixeira@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/pgte/konphyg.git"
  },
  "bugs": {
    "url": "http://github.com/pgte/konphyg/issues"
  },
  "engines": [
    "node >= 0.4.0"
  ],
  "devDependencies": {
    "tap": "~0.4.4"
  },
  "main": "./index",
  "scripts": {
    "test": "node_modules/.bin/tap tests"
  },
  "readme": "# konphyg [![Build Status](https://secure.travis-ci.org/pgte/konphyg.png)](http://travis-ci.org/pgte/konphyg)\n\nCascading configuration files made easy in Node.js.\n\n# Install\n\n    $ npm install konphyg\n\n# Usage\n\nPlace your configuration files inside a dir (you can name it \"config\" for convention).\n\nThese should be JSON files, terminated by \".json\".\n\nThis example loads and parses the ../config/redis.json file:\n\n```js\n// Initialize konphyg with the base config dir\nvar config = require('konphyg')(__dirname + '../config');\n\n// Read the \"redis\" domain\nvar redisConfig = config('redis');\n// Loading all configurations\nvar config = konphyg.all();\n```\n\n## Environment-specific files and cascading\n\nInside the configuration dir you can have many files for each configuration set.\n\nFor instance, you can have a `redis.json`, which will work by default and a `redis.test.json` which will be loaded when the environment variable NODE_ENV is 'test'.\n\nThe base `redis.json` values can be overrided by the more specific `redis.test.json` one.\n\nWhat happens here is that the settings in the base configuration are merged with the `redis.test.json` one (using deep merge), so you only have to place the differences inside the environment-specific file.\n\n# Examples\n\nFor instance let's say you have this `redis.json` file:\n\n```json\n{\n    \"host\": \"redis.acme.com\"\n  , \"port\": \"6379\"\n}\n```\n\nand that you have this `redis.development.json` file:\n\n```json\n{\n  \"host\": \"127.0.0.1\"\n}\n```\n\nThe resulting configuration for the development environment will be the merge of the 2:\n\n```json\n{\n    \"host\": \"127.0.0.1\"\n  , \"port\": \"6379\"\n}\n```\n\nThis also works with attributes nested at any level.\n\n## NODE_ENV defaults\n\nIf not present, the chosen environment is 'development'.\n\nIf you want to launch a node process using the 'production' environment you should then do something like:\n\n```bash\nNODE_ENV=production node app.js\n```\n\n# Resources\n\n* [Configuration files in Node.js made easy with Konphyg](http://metaduck.com/post/10514524808/configuration-files-in-node-js-made-easy-with-konphyg)\n",
  "readmeFilename": "README.md",
  "_id": "konphyg@1.2.1",
  "dist": {
    "shasum": "1e25a4c0b889bdef6f4aa219c53404b36c76cd20"
  },
  "_from": "konphyg@",
  "_resolved": "https://registry.npmjs.org/konphyg/-/konphyg-1.2.1.tgz"
}
